generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum AIModel {
  GPT
  CLAUDE
  LLAMA
}

model User {
  id         String      @id // Clerk will provide this ID
  name       String
  email      String      @unique
  workspaces Workspace[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Classroom {
  id         String      @id // Clerk orgId
  workspaces Workspace[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workspace {
  id          String   @id @default(cuid())
  title       String
  description String?
  pdfUrl      String
  activeAi    AIModel
  context     Context?
  notes       String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  classroom   Classroom? @relation(fields: [classroomId], references: [id])
  classroomId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Context {
  id       String  @id @default(cuid())
  vectordb String
  aiModel  AIModel

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @unique

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MessageRole {
  USER
  SYSTEM
}

model Message {
  id      String      @id @default(cuid())
  content String
  role    MessageRole

  context   Context @relation(fields: [contextId], references: [id], onDelete: Cascade)
  contextId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([contextId])
}
